Access Specifiers in C#
  What are Access Specifiers in C#?
    Every keyword that we use such as private, public, protected, virtual, sealed, partial, abstract, static, base, etc. is called Modifiers. Access Specifiers are special kinds of modifiers  
    using which we can define the scope of a type and its members.
    So, in simple words, we can say that the Access Specifiers are used to define the scope of the type (Class, Interface, Structs, Delegate, Enum, etc.) as well as the scope of their members
    (Variables, Properties, Constructors, and Methods). Scope means accessibility or visibility that is who can access them and who cannot access them are defined by the Access Specifiers. 
    See, I have a class with a set of members, who can consume these members, and who cannot consume these members are defined by the access specifiers.

  Different Types of Access Specifiers in C#:
    C# supports 6 types of access specifiers. They are as follows
    1) Private
    2) Public
    3) Protected
    4) Internal
    5) Protected Internal
    6) Private Protected (C# Version 7.2 onwards)  
    Members that are defined in a type with any scope or specifiers are always accessible within that type; restriction comes into the picture only when we try to access them outside of the 
    type. Each and every access specifier has a different scope and let us understand the scope of each access specifier with examples.
    Note: I am going to explain the example using Visual Studio 2019. The previous version of Visual Studio might not be supporting the newly provided access specifier private protected.

  Understand Type and Type Members in C#:
    Before understanding Access Specifier, let us first understand what are Types and Type Members in C#. Please have a look at the below diagram. Here, Example (which is created by using the
    class keyword) is a Type, and Variable ID, Property Name, Constructor Example, and Method Display are type members.
    So, in general classes, structs, enums, interfaces, and delegates are called types, and variables, properties, constructors, methods, etc. that normally reside within a type are called
    type members. The type members can have all 6 access specifiers whereas types can have only 2 (internal, public) Access Modifiers. By default, if we have not specified any type, then for
    type is going to be internal access specifier and for type members, it is going to be a private Access Specifier.

  What are Assemblies in .NET Framework?
    According to MSDN, Assemblies are the building block of .NET Framework applications; they form the fundamental unit of deployment. In simple words, we can say that Assembly is nothing but 
    a precompiled .NET Code that can be run by CLR (Common Language Runtime).
    For a console application, the assembly is EXE and for the class library project, the assembly is DLL. We cannot run a DLL directly but we can run an EXE directly.
    First, we will discuss Access Specifiers or Access Modifiers with the Type Members and then we will discuss Access Specifiers with the Type.

  Access Specifiers or Access Modifiers with the Type Members:
    Access Specifiers or Access Modifiers defined the scope of the type members. That is from where we can access them and from where we cannot access them. So, first of all, we need to understand
    what are the different scopes for type members. The different scope for the type members is as follows:
    1) With the Class
    2) Derived Class in Same Assembly
    3) Non-Derived Class in Same Assembly
    4) Derived Class in Other Assemblies
    5) Non-Derived Class in Other Assemblies
    Now, based on the Access Specifier, the restriction is applied to the Type Members. Now, let us proceed and understand the different access specifier and let us also understand from which scope we can access them.

  Private Access Specifier or Modifier in C# with Examples:
    When we declare a type member (variable, property, method, constructor, etc) as private, then we can access that member with the class only. From outside the class, we cannot access them.
    1) With the Class: YES
    2) Derived Class in Same Assembly: NO
    3) Non-Derived Class in Same Assembly: NO
    4) Derived Class in Other Assemblies: NO
    5) Non-Derived Class in Other Assemblies: NO

  Public Access Specifiers or Access Modifiers in C# with Examples:
    When we declare a type member (variable, property, method, constructor, etc) as public, then we can access that member from anywhere. That means there is no restriction for public members.
    So, the scope of the public member in C#.NET is as follows:
    1) With the Class: YES
    2) Derived Class in Same Assembly: YES
    3) Non-Derived Class in Same Assembly: YES
    4) Derived Class in Other Assemblies: YES
    5) Non-Derived Class in Other Assemblies: YES

  Protected Access Specifier or Access Modifier in C# with Examples:
    Protected Members in C# are available within the containing type as well as to the types that are derived from the containing type. That means protected members are available within the parent class
    (i.e. the containing type) as well as to the child/derived classes (classes derived from the containing type). 
    So, the scope of the protected members in C#.NET is as follows:
    1) With the Class: YES
    2) Derived Class in Same Assembly: YES
    3) Non-Derived Class in Same Assembly: NO
    4) Derived Class in Other Assemblies: YES
    5) Non-Derived Class in Other Assemblies: NO

  Internal Access Specifier or Access Modifier in C# with Examples:
    Whenever a member is declared with Internal Access Specifier in C#, then it is available anywhere within the containing assembly. It’s a compile-time error to access an internal member from outside the containing assembly.
    So, the scope of the internal members in C#.NET is as follows:
    1) With the Class: YES
    2) Derived Class in Same Assembly: YES
    3) Non-Derived Class in Same Assembly: YES
    4) Derived Class in Other Assemblies: NO
    5) Non-Derived Class in Other Assemblies: NO

  Protected Internal Access Specifier or Access Modifier in C#:
    Protected Internal Members in C# can be accessed anywhere within the same assembly i.e. in which it is declared or from within a derived class from another assembly. So, we can think, it is a combination of Protected
    and Internal access specifiers. If you understood the Protected and Internal access specifiers, then this should be very easy to follow. Protected means, members can be accessed within the derived classes, and Internal 
    means within the same assembly. 
    So, the scope of the protected internal members in C#.NET is as follows:
    1) With the Class: YES
    2) Derived Class in Same Assembly: YES
    3) Non-Derived Class in Same Assembly: YES
    4) Derived Class in Other Assemblies: YES
    5) Non-Derived Class in Other Assemblies: NO

  Private Protected Access Specifier or Access Modifier in C# with Examples:
    The private protected members are accessible within the class and within the derived class of the same assembly but cannot be accessed from another assembly.
    So, the scope of the private protected members in C#.NET is as follows:
    1) With the Class: YES
    2) Derived Class in Same Assembly: YES
    3) Non-Derived Class in Same Assembly: NO
    4) Derived Class in Other Assemblies: NO
    5) Non-Derived Class in Other Assemblies: NO

  Access Specifiers with Type in C#:
    We can use all 6 access specifiers with type members in C# but type allows only two access specifiers i.e. Internal and Public. It is a compile-time error to use private, protected, protected internal, and
    private protected accesss pecifiers with types. The following code will generate a compiler error (as we marked the class Program as private) stating Elements defined in a namespace cannot be explicitly declared
    as private, protected, protected internal, or private protected. So, the only allowed access specifiers for a type is internal and public and if we have not specified any access specifier, then by default it is
    going to be internal.
    Note: The point that you need to remember is if you want to access the class only within the same assembly, then you need to declare the class as internal and if you want to access the class from the same assembly
    as well as from other assemblies then you need to declare the class as public.

  What are the default Access Specifiers in C# for a Class and Class Members?
    If we don’t specify an access specifier in C# then for Class, the default access specifier is internal and for class members it is private.

  
  

  
  