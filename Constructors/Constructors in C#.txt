Constructors in C#
  What is a Constructor in C#?
    It is a special method present inside a class responsible for initializing the variables of that class. We will come to this point later part of this article.
    The name of the constructor method is exactly the same name as the class in which it was present. You cannot change the name. If your class name is Employee, then the name of the constructor method is going to be Employee, and if
    your class name is Student, then the constrictor name is also going to be Student.
    The constructor method does not return any value. That means it is a non-value returning method. Generally, methods are of two types i.e. value returning and non-value returning and constructors are purely non-value returning.
    That is, they never return any value.

  Example to Understand Constructor in C#
    Each and every class requires this constructor if we want to create the instance of the class. If we don’t have a constructor, then we cannot create an instance of the class. At this point, you have one doubt, earlier we defined many
    classes but we never used a constructor, but still, we are able to create the instance of the class, how? Let us clarify this doubt. Suppose, we have a class as follows:
    class Test
    {
       int i;
    }
    Then, we create an instance of the above Test class somewhere in our application as follows:

    Test obj = new Test();

    Is the above statement valid? Yes, it is valid. The reason is that it is the responsibility of a programmer to define a constructor under his class and if he/she fails to do, on behalf of the programmer an implicit constructor gets
    defined in that class by the compiler. For a better understanding, please have a look at the below diagram which shows the code before and after compilation.
    class Test               class Test
    {                        {
       int i;                   int i;
    }                           public Test()
                                {
                                   i = 0;
                                }
                             }
    Before Compilation        After Compilation
    You can see here that after compilation, the compiler adds the public constructor to the class and initializes the variable and this is the responsibility of a constructor i.e. initializing the variables of that class. 
    Here, it is initializing the variable with 0. If a class variable is initialized implicitly means that is done by a constructor.
    Every variable we declared inside a class and every field we declared inside a class has a default value. All numeric types are initialized with 0, Boolean types initialized with false, and string and object types initialized with
    null. For a better understanding, please have a look at the below image.
    class Test               class Test
    {                        {
       int i;                   int i;
       string s;                string s;
       bool b;                  bool b;
    }                           public Test()
                                {
                                   i = 0;
                                   s = null;
                                   b = false;
                                }
                             }
    Before Compilation        After Compilation
    Like this, the initialization is performed for each and all variables present in the class and this is the responsibility of the constructor. That is why a constructor is very important for us inside a class.
    We are not assigning a value, but a value is coming there means someone has assigned the value to these variables. So, who is going to do that? The constructor is going to do that. And this constructor is not defined by us. 
    Then who defined this constructor? The compiler defined this constructor for us. And we call this an Implicit Constructor. And if we defined the same thing, then it is called an explicit constructor.

  Points to Remember while working with Constructors in C#:
    1) Implicitly Defined Constructors are parameter less and these constructors are also known as Default Constructors. This is because they are used to initialize the variables with default values.
    2) Implicitly Defined Constructors are public. If you see in our example, we define the class Test with a default access specifier but the constructor is public which is generated by the compiler.
    3) We can also define a constructor under the class and if we define it, we can call it an Explicit Constructor and an Explicit Constructor can be parameter less and parameterized also.

  How to Define the Constructor Explicitly in C#?
    We can also define the constructor explicitly in C#. The following is the explicit constructor syntax.
    [<modifiers>] <class name> ([<Parameter List])

  Defining and Calling Constructor in C#:
    Defining: Defining a constructor means implementing a constructor in your class. Defining can be two types i.e. Implicit and Explicit. Implicit means the compiler will define the constructor. Explicit means we as a programmer
              define the constructor.
    Calling: Whenever we are creating the instance, we are calling the constructor. Calling is Explicit. We should only call. There is no implicit call to the constructor.
             The calling should be done explicitly by us. That may be an implicit or explicit constructor but calling the constructor should be explicit.

                                                                    Frequently Asked Interview Questions:
  What is a Constructor in C#?
    In simple words, we can define the constructors in C# are the special types of methods of a class that are executed whenever we create an instance (object) of that class. The Constructors are responsible for two things.
    One is the object initialization and the other one is memory allocation. The role of the new keyword is to create the object and the role of the constructor is to initialize the variables.

  What are the rules to follow while working with C# Constructor?
    1) The constructor’s name should be the same as the class name.
    2) It should not contain a return type even void also.
    3) As part of the constructor body return statement with a value is not allowed.

  What does a Constructor have in C#?
    1) It can have all five accessibility modifiers i.e. public, private, protected, etc.
    2) The constructor can be parameterless or parameterized.
    3) It can have a throws clause which means we can throw an exception from the constructor.
    4) The constructor can have logic, as part of logic it can have all C#.NET legal statements except return statements with value.
    5) We can place a return; in the constructor.
    
  Syntax :
    class Sample
    {
       public sample()
       {
          ....
       }
    }

  Can we define a method with the same class name in C#?
    No, it is not allowed to define a method with the same class name in C#. 

  




    