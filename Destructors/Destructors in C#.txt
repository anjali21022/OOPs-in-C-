Destructors in C#
  What are Destructors in C#?
    According to MSDN, Destructors which are also called Finalizers in C# are used to perform any necessary final clean-up when a class instance is being collected by the garbage collector.
    The Destructor is also a special type of method present in a class, just like a constructor, having the same name as the class name but prefixed with ~ tilde. The Constructor in C# is 
    Explicitly called when the object of the class is created. On the other hand, the Destructor in C# is Implicitly Called when the object of the class is destroyed.
    The Constructor and destructor methods will exactly have the same name as the class to which they belong. So, to differentiate between these two, a tilde (~) symbol is used just before 
    the destructor method. The syntax is shown below.
    Class Example
    {
       //Constructor
       public Example(int x, int y)
       {
          //Initialize the Members
       }
       //Destructors
       ~Example()
       {
          //Cleanup Statements
       }
    }
    Note: The most important point that you need to keep in mind is that a destructor method cannot have any parameters as well as cannot be applied with any modifiers. As the destructor is
    not parameterized, so we cannot overload the destructor.

  When is a Destructor method Called in C#?
    A destructor method gets called automatically by the garbage collector when the object of the class is destroyed. So, the point that you need to remember is that the destructor methods
    are automatically called by the garbage collector.

  When will the Object of a Class get Destroyed in C#?
    The object of a class in C# will be destroyed by the garbage collector in any of the following cases
    1) At the end of the program execution, each and every object that is associated with the program will be destroyed by the garbage collector.
    2) The Implicit calling of the garbage collector occurs sometime in the middle of the program execution provided the memory is full so the garbage collector will identify unused objects
       of the program and destroys them.
    3) The Explicit calling of the garbage collector can also be done in the middle of program execution by the programmer with the help of the “Collect()” statement so that if there are any
       unused objects associated with the program will be destroyed in the middle of the program execution.

  Points to Remember while working with Destructors in C#:
    Point1: Destructors (or Finalizers) cannot be defined in structs. In C#, they are only used with only classes.
    Point2: In a class, we can only define one Destructor (or Finalizer). That means Destructors cannot be overloaded in a class.
    Point3: Destructors cannot be called Explicitly. They are invoked automatically by the garbage collector. At most what we can do is, we can request the Garbage collector to execute the
            Destructor by calling the GC.Collect() method.
    Point4: A Destructor does not take any modifiers or does not have any parameters. They are parameterless.

  How Destructors are Implemented in C#?
    Note1: Empty Destructors should not be used in our application. When a class contains a destructor, then an entry for that destructor is created in the Finalize queue. This is the
           queue that is processed by the garbage collector. When the Garbage Collector processes the Finalize queue, it will call each destructor. So, Unnecessary destructors, including 
           empty destructors, destructors that only call the base class destructor, or destructors that only call conditionally emitted methods, cause a needless loss of performance.
    Note2: As a developer, we have no control over when the destructor is called and executed. It is the garbage collector in .NET Framework who decides when to call destructors. 
           The garbage collector periodically checks for objects that are no longer being used by the application. If it considers an object eligible for destruction, then it calls the 
           destructor (if any) and reclaims the memory used to store the object. It is also possible to force garbage collection by calling the GC.Collect method, but most of the time, 
           this call should be avoided because it may create performance issues. 

  When to use Destructor in C#?
    You might have one question on your mind if the memory management is automatically managed by the garbage collector, then when do we need to use Destructor? In general, as C#.NET 
    developers, we need not be much more worried about memory management. This is because the .NET garbage collector implicitly manages the allocation and deallocation of the memory for
    our objects.
    However, when our application works with unmanaged resources, such as windows, files, and network connections, we should use a destructor to free the memory for those unmanaged resources.
    When the object is eligible for destruction, the garbage collector runs the Finalize method of the object.

  Explicit Release of Resources using Dispose Pattern in C#:
    If our application is using an expensive external resource, then it is recommended to provide an explicit way to release the resources before the garbage collector frees the object.
    To release the resource, it is recommended to implement a Dispose method of the IDisposable interface that performs the necessary clean-up for the object. So, basically, we need our class
    to inherit from the IDisposable interface and provide the implementation for the Dispose methods as follows. So, here, please select Implement Interface with Dispose Pattern option.
 
  Understanding Dispose Pattern in C#:
    1) disposedValue: The disposedValue variable to identify the redundant call. Suppose, we have requested to destroy the resources and if again we are requesting to destroy the object,
                      then it will check this field and identify whether it is a redundant call or not, and based on this it will do the clean-up activities.
    2) Dispose(bool disposing): We need to write the actual logic to destroy the managed and unmanaged resources inside this method. This disposing variable value which this method takes as an 
                                input parameter will identify whether we need to destroy the managed resources or not. Further, it checks the disposedValue variable value to check whether it 
                                needs to perform the cleanup activity or not. If the request comes for the first time, the value for the disposedValue variable will be false and in that case, 
                                it will perform the clean-up activity and at the end, it sets the value true. So, when a redundant request comes, it will not perform the clean-up activity.
    3) ~UmmanagedResource(): By default, you will see that destructor or finalizer code is commented. But if you want to destroy the resources through destructor, then you need to uncomment 
                             this destructor or finalizer. But, as part of this destructor, you need to write cleanup code for managed resources and then you need to call the Dispose(false) 
                             method to clean up the unmanaged resources. You, need to override a finalizer or destructor only if Dispose(bool disposing) method has code to free unmanaged 
                             resources only.
    4) Dispose(): This is the method that we need to call from our code to clean up the managed and unmanaged resources. As part of this method, we need to call Dispose(true) method which is 
                  actually going to clean up both managed and unmanaged resources. Again, if you override the destructor or finalizer method, then you need to call GC.SuppressFinalize(this) 
                  method which will tell the garbage collector to just ignore the destructor i.e. informing CLR (Garbage Collector) to not call the destructor or finalizer. You only need to 
                  uncomment this if you have overridden the destructor or finalizer.
