Interface in C#
  What is an Interface in C#?
    The Interface in C# is a Fully Un-Implemented Class used for declaring a set of operations/methods of an object. So, we can define an interface as a pure abstract class which allows us
    to define only abstract methods. The abstract method means a method without a body or implementation.
    It is used to achieve multiple inheritances which can’t be achieved by class. It is used to achieve full abstraction because it cannot have a method body.
    Till now we are learning classes. So, what is a class? A class is a user-defined data type. Then what is an interface? An interface is also a user-defined data type. Then what is the
    difference between them? Let us understand this first.

  Differences between Class, Abstract Class, and Interface in C#:
    A class can contain only the methods which contain the method body. Do we have a method without the body? Yes, we have methods without a body and that are called abstract methods.   
    So, simply we can say class contains a method with a method body or you can say non-abstract methods. Abstract class contains both abstract and non-abstract methods and the interface
    contains only abstract methods.
    1) Class: Contains only the Non-Abstract Methods (Methods with Method Body).
    2) Abstract Class: Contains both Non-Abstract Methods (Methods with Method Body) and Abstract Methods (Methods without Method Body).
    3) Interface: Contain only Abstract Methods (Methods without Method Body).
    Note: Every abstract method of an interface should be implemented by the child class of the interface without fail (Mandatory).
    In Inheritance, we already learned that a class inherits from another class, and the child class consumes the members of the Parent class. Please observe the following diagram. Here, we
    have class A with a set of members and class B is inheriting from class A. And there is a relationship called Parent/Child relation between them. And once the Parent/Child relationship
    is established, then the members of class A can be consumed under class B. So, this is what we learned in Inheritance.
    Now, just like a class is having another class as a Parent, a class can also have an Interface as a Parent. And if a class has an interface as a Parent, the class is responsible for
    providing the implementation for all the abstract methods of the interface. For a better understanding, please have a look at the below diagram.
    Simply speaking, the Parent Interface imposes restrictions on the Child Classes. What restrictions? The restrictions are to implement each and every method of the interface under the
    child class.
    Generally, a class inherits from another class to consume members of its Parent. On the other hand, if a class is inheriting from an interface, it is to implement the members of its
    Parent (Interface), not for consumption.
    Note: A class can inherit from a class and interface(s) at a time.

  How to Define an Interface in C#?
    The way we define a class, in the same way, we need to define an interface in C#. In a class declaration, we need to use the class keyword whereas in an interface declaration, we need 
    to use the interface keyword. Moreover, in an interface, we can only declare abstract members.
    For a better understanding please have a look at the below example. Here, we have created one interface with the name ITestInterface by using the interface keyword.
    interface ITestInterface
    {
        //Abstract Member Declarations
    }

  How to Define Abstract Methods in an Interface in C#?
    In a class (i.e. Abstract Class), we generally use the abstract keyword to define abstract methods as follows.
    public abstract void Add(int num1, int num2);
    If you want to write the above abstract method in an interface, then you don’t require public and abstract keywords in the method signature as follows:
    void Add(int num1, int num2);
    While working with Interface we need to remember some Rules. Let us discuss those rules one by one with Examples.
    Point 1: The first point that you need to remember is the default scope for the members of an interface is public whereas it is private in the case of a class.
    Point 2: The second point that you need to remember is by default every member of an interface is abstract, so we don’t require to use the abstract modifier on it again just like we
    do in the case of an abstract class. For a better understanding, please have a look at the below example. By default, the Add method is going to be public and abstract.
    interface ITestInterface
    {
        //By default, the following method is public and abstract
        void Add(int num1, int num2);
    }
    Point 3: The third point that you need to remember is we cannot declare fields/variables, constructors, and destructors in an interface in C#.

  What are the Members we can and can’t define in an interface in C#?
    An interface can contain
    1) Abstract methods
    2) Properties
    3) Indexes
    4) Events
    An interface cannot contain
    1) Non-abstract functions
    2) Data fields
    3) Constructors
    4) Destructors
    Point 4: The fourth point that you need to remember is if require an interface can inherit from another interface in C# just like a class inherits from another class.
    Point 5: The fifth point that you need to remember is every member of an interface should be implemented under the child class without fail (mandatory), but while implementing we
    don’t require to use the override modifier just like we have done in the case of an abstract class.
    Point 6: We cannot create an instance of an interface, but we can create a reference of an interface. The interface reference is going to hold the child class instance. Using the
    interface reference, we can only invoke the methods which are declared in the interface.

  Explicit Interface Implementation in C#
    When each interface method is implemented separately under the child class by providing the method name along with the interface name then it is called Explicit Interface
    Implementation. But in this case, while calling the method we should compulsorily use the interface reference that is created using the object of a class or typecast the object to the
    appropriate interface type. 
    You can also implement an interface in another way without using the public access modifier. In this case, we need to specify the interface name before the method name using the dot
    operator. This is called Explicit Implementation of Interface Methods.
  
    