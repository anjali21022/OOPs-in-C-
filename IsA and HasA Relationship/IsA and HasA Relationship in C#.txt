IsA and HasA Relationship in C#
  IsA and HasA Relationship in C# with Examples:
    Let us understand IS-A and HAS-A Relationship in C# with one example. Please have a look at the below example.
    class Rectangle{
          Some Data Members
          Some Member Functions
    }

    This is a class called Rectangle. Let us assume data we have some data members and member functions there inside this class. Next, we have a class called Cuboid which is inheriting from the above Rectangle class as follows.
    class Cuboid : Rectangle{
          Some Data Members
          Some Member Functions
    }

    This is the Cuboid class which is inherited from the Rectangle class. Also, assume that this class also has some data members and member functions inside it. Now let us write one more class as follows.
    class Table{
       Rectangle top;
       int legs;
    }

    This is the Table class which is not inherited from any class. This class has two data members. One of the data members is of class Rectangle and the other is of integer type variable i.e. top and legs.

    So first we have created a class called Rectangle. Then we created another class called Cuboid which is inherited from the Rectangle class and then we created another class called Table. Inside the Table class, we have created 
    one variable of the type Rectangle as well as another variable of integer type.

    The class Cuboid is inherited from the Rectangle class. So, can we say that a Cuboid IA A Rectangle? Yes. So, the relationship between the Rectangle class and Cuboid class is the Is A relationship. So, the point that you need 
    to remember is whenever we are making the Inheritance relationship or Parent-Child relationship, then we can say that relationship as IS-A relationship in object-oriented programming languages.

    Next, our Table class, it is having a top variable that is of the type Rectangular. That means the Table class is having an object of the Rectangle class. So, can we say that the Table class HAS A Rectangle? Yes, the Table class
    Has a Rectangle. So, the relationship between the Table class and the Rectangle class is the Has A relationship.

    So, we can use our class in two ways that are ‘Is A’ and ‘Has A’. This is common in object-oriented programming languages just not for C#, it is available in C++, Java, and other Object-Oriented Programming Language. 

    So, a class in C# can be used in two ways. One way is by using the Inheritance relationship i.e. one class is inheriting from that class. The second approach is that you can create an object of that class and use it. So, there 
    are two ways of using one class. Either you can create the object and use it or you can inherit it from that class.

  Real-time Example to Understand Is-A and Has-A Relationship:
    Let us understand IS-A and HAS-A relationships with one Real-time Example. Let us take an example. Please have a look at the below image.
    Let us assume that the above image shows the design of my car. Now I can manufacture any number of cars from the above design and I can sell them on the market. Let us assume we have manufactured the following cars from the above
    design.
    Manufacturing the Cars means, these are objects. Now I can sell my design (not the manufactured cars or objects, only the design) to your company and you can manufacture your car with some changes in the above design which I sell
    to you.

  So, what are the uses of design class?
    What is the use of the design class means in how many ways we can use the design class? We can use the design class in two ways. Either we share it with the derived classes or create an object. If a class is inheriting from some
    other class, then it is having an ‘IS A’ relationship with that class or if a class is having an object of some other class, then it is having a ‘HAS A’ relationship with that class. So, Table has a Rectangle, and a Cuboid is a
    Rectangle.
    Next, important thing is that a class can have different types of members i.e. we have six types of members such as public, private, protected, internal, protected internal, and private protected. But, let us assume that we have
    three types of members in our class such as private, protected, and public.
    Now when you have those three types of members then which members are accessible inside the class, which members are accessible in the class which is having ‘IS A’ relationship, and which members are accessible in the class which
    is having ‘HAS A’ relationship? So, it means what is accessible inside the class and what is accessible in derived classes, and what is accessible upon an object. We already discussed this in our Access Specifiers article. All the
    members are accessible within the class, public and protected members are accessible in the derived classes (IS-A relationship) and public members are only accessible from non-derived classes (HAS-A relationship).

  How to Decide What to Implement between IS-A and HAS-A?
    Simply, ask the question yourself. For example, If I ask you the questions which statement gives you more sense from the below two statements?
    Employee IS-A Address
    Employee HAS-A Address
    Then definitely, you will tell Employee HAS-A Address gives more sense than Employee IS-A Address. Now, again If I ask you, which statement gives you a better sense of the below two statements?
    BMW IS-A Car
    BMW HAS-A Car
    Then definitely your answer will be BMW IS-A Car.

    Note: In C#, the IS-A relationship is implemented using Inheritance and the HAS-A relationship is implemented using Composition i.e. declaring a variable. So, whenever we declare a variable of one class inside another class, 
          we called it a Composition or you can say HAS-A relationship.
    
  