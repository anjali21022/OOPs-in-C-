Static vs Non-Static Constructors in C#
  Point1:
    If a constructor is explicitly declared by using the static modifier, we call that constructor a static constructor whereas the rest of the others are called non-static constructors only.
    Non-Static Constructors are also called Instance Constructors in C#.
  Point2:
    Constructors are responsible for initializing the fields or variables of a class. Static Fields/Variables are initialized by static constructors and non-static fields/variables are 
    initialized by non-static or instance constructors in C#.
  Point3:
    Static constructors are implicitly called whereas non-static constructors are explicitly called.
  Point4:
    Static Constructors execute immediately once the execution of a class start and moreover, it is the first block of code to run under a class whereas non-static constructors execute only 
    after creating the instance of the class as well as each and every time the instance of the class is created.
  Point5:
    Static Constructors are executed only once whereas the non-static constructors are executed 0 or n number of times depending on the number of instances we created for the class.
  Point6:
    Non-Static Constructors can be parameterized whereas the static constructors cannot have any parameter. This is because we explicitly call the non-static constructors, so we can have
    a chance to pass parameters. On the other hand, static constructors are implicitly called and it is the first block of code to run under a class, and hence we donâ€™t have any chance
    to pass parameters. 
  Point7:
    Non-Static Constructors can be overloaded whereas static constructors cannot be overloaded. Overloading is something that comes into the picture based on the parameters.
    As we have a chance to pass parameters in the case of non-static constructors, overloading is possible. On the other hand, we cannot pass parameters to static constructors
    i.e. static constructors are parameterless, and hence overloading is not possible.
  Point8:
    Every class contains an implicit constructor if not defined explicitly and those implicit constructors are defined based on the following criteria.
    1) Every class except a static class contains an implicit non-static constructor if not defined with an explicit constructor.
    2) Static constructors are implicitly defined only if that class contains any static fields or else that constructor will not be present provided that the class does
       not have an explicit static constructor.

  When the Static Constructor of a Class is Executed in C#?
    It is very important for us to understand when the static constructor of a class is executed implicitly. The following are the three scenarios where the static constructor is executed implicitly.
    1) If both the static constructor and Main method are present in a single class, then the program execution will start from the Main method, but before executing the Main method body, 
    it will first execute the Static Constructor of the class.
    2) When we call any static variables or static methods for the First time in a class, then it will execute the static constructor of that class.
    3) When we create an instance of a class for the first time, then before executing the non-static constructor, it will first execute the static constructor of that class.
    The most important point that you need to remember is static constructors are executed only once irrespective of the number of times you called the static variables or static methods or
    irrespective of the number of times you created the instance of the class.
    Note: In the life cycle of a class (life cycle in the sense the moment we start the execution to the end of the class is considered as one life cycle), the static constructor is executed once and 
    only one time whereas the non-static constructors execute for 0 times if no instances are created and n times if n number of instances are created. So, a static constructor must be parameterless in C#.

  Summary of Static and Non-Static Constructors:
    1) A constructor is a special method inside a class used to initialize the data members. If we create the constructor using a static modifier then we call it a static constructor and 
       the rest of all are non-static constructors only.
    2) The static constructor is used to initialize the static data members and the non-static constructor is used to initialize the non-static data members of a class.
    3) The static constructor is always invoked implicitly while the non-static constructor is always invoked explicitly.
    4) If we have not defined any constructor explicitly, then the compiler will provide the implicit constructor in the following conditions.
    5) For a static class, the compiler will provide a static constructor implicitly, but no non-static constructor.
    6) For a non-static class, the compiler will provide a non-static constructor, if the non-static class has any static member, then only the compiler will provide the static constructor.
    7) Static constructors will execute only once during the life cycle of a class and non-static constructors are executed 0 or n number times. If we have not created any object,
       then the constructor will execute 0 times and if we create n number of objects, then the constructor will execute n number of times.
    8) In a class, we can have only one static constructor and i.e. too parameterless, and hence static constructor cannot be overloaded. But, in a class, we can define any number of 
       non-static constructors and hence non-static constructors as overloaded.
    9) A static constructor is executed when our class execution starts and it will execute only once and it will be the first block inside a class to be executed while non-static
       constructors are going to be executed when we create an instance of a class and for each instance of the class.
  
  